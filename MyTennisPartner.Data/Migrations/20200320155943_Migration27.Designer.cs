// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTennisPartner.Data.Context;

namespace MyTennisPartner.Data.Migrations
{
    [DbContext(typeof(TennisContext))]
    [Migration("20200320155943_Migration27")]
    partial class Migration27
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyTennisPartner.Data.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("AddressId");

                    b.HasIndex("VenueId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("VenueId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoAddToLineup")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoReserveCourts")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultFormat")
                        .HasColumnType("int");

                    b.Property<int>("DefaultNumberOfLines")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("HomeVenueVenueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<bool>("MarkNewCourtsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("MarkNewPlayersConfirmed")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("MatchStartTime")
                        .HasColumnType("time");

                    b.Property<int>("MaxNumberRegularMembers")
                        .HasColumnType("int");

                    b.Property<string>("MaximumRanking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingDay")
                        .HasColumnType("int");

                    b.Property<int>("MeetingFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<string>("MinimumRanking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(52)")
                        .HasMaxLength(52);

                    b.Property<int>("NumberMatchesPerSession")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("RotatePartners")
                        .HasColumnType("bit");

                    b.Property<bool>("ScoreTracking")
                        .HasColumnType("bit");

                    b.Property<int>("WarmupTimeMinutes")
                        .HasColumnType("int");

                    b.HasKey("LeagueId");

                    b.HasIndex("HomeVenueVenueId");

                    b.HasIndex("OwnerMemberId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.LeagueMember", b =>
                {
                    b.Property<int>("LeagueMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubstitute")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("LeagueMemberId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MemberId");

                    b.ToTable("LeagueMembers");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Line", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourtNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CourtNumberOverridden")
                        .HasColumnType("bit");

                    b.Property<string>("CourtsAvailable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("LineId");

                    b.HasIndex("MatchId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoReserveCourts")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<bool>("HomeMatch")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchVenueVenueId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WarmupTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("MatchVenueVenueId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoReserveVenues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("HelpTipTrackers")
                        .HasColumnType("int");

                    b.Property<int?>("HomeVenueVenueId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberRoleFlags")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyAddOrRemoveMeFromMatch")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyCourtChange")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyMatchAdded")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyMatchDetailsChangeOrCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifySubForMatchOpening")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillRanking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpareTimeMemberNumber")
                        .HasColumnType("int");

                    b.Property<string>("SpareTimePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpareTimeUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPreferenceFlags")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("MemberId");

                    b.HasIndex("HomeVenueVenueId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.MemberImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("MemberImages");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.MemberRole", b =>
                {
                    b.Property<int>("MemberRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("MemberRoleId");

                    b.ToTable("MemberRoles");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<bool>("IsHomePlayer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubstitute")
                        .HasColumnType("bit");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("LeagueMemberId");

                    b.HasIndex("MatchId");

                    b.HasIndex("MemberId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.PlayerPreference", b =>
                {
                    b.Property<int>("PlayerPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("PlayerPreferenceId");

                    b.HasIndex("MemberId");

                    b.ToTable("PlayerPreferences");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.ReservationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourtReservationProvider")
                        .HasColumnType("int");

                    b.Property<int>("EarliestCourtHour")
                        .HasColumnType("int");

                    b.Property<int>("EarliestCourtMinute")
                        .HasColumnType("int");

                    b.Property<string>("HostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LatestCourtHour")
                        .HasColumnType("int");

                    b.Property<int>("LatestCourtMinute")
                        .HasColumnType("int");

                    b.Property<int>("MaxDaysAhead")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId")
                        .IsUnique();

                    b.ToTable("ReservationSystems");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Address", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Venue", null)
                        .WithOne("VenueAddress")
                        .HasForeignKey("MyTennisPartner.Data.Models.Address", "VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Contact", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Venue", null)
                        .WithOne("VenueContact")
                        .HasForeignKey("MyTennisPartner.Data.Models.Contact", "VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.League", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Venue", "HomeVenue")
                        .WithMany()
                        .HasForeignKey("HomeVenueVenueId");

                    b.HasOne("MyTennisPartner.Data.Models.Member", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerMemberId");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.LeagueMember", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.League", "League")
                        .WithMany("LeagueMembers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTennisPartner.Data.Models.Member", "Member")
                        .WithMany("LeagueMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Line", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Match", "Match")
                        .WithMany("Lines")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Match", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.League", "League")
                        .WithMany("Matches")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTennisPartner.Data.Models.Venue", "MatchVenue")
                        .WithMany()
                        .HasForeignKey("MatchVenueVenueId");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Member", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Venue", "HomeVenue")
                        .WithMany()
                        .HasForeignKey("HomeVenueVenueId");
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.MemberImage", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Member", null)
                        .WithOne("Image")
                        .HasForeignKey("MyTennisPartner.Data.Models.MemberImage", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.Player", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTennisPartner.Data.Models.LeagueMember", "LeagueMember")
                        .WithMany("Players")
                        .HasForeignKey("LeagueMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyTennisPartner.Data.Models.Match", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyTennisPartner.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.PlayerPreference", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Member", null)
                        .WithMany("PlayerPreferences")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTennisPartner.Data.Models.ReservationSystem", b =>
                {
                    b.HasOne("MyTennisPartner.Data.Models.Venue", null)
                        .WithOne("ReservationSystem")
                        .HasForeignKey("MyTennisPartner.Data.Models.ReservationSystem", "VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
